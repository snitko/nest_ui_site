.mainSection

  = partial "menu", locals: { current_page: "Overview" }
  .content

    Most frameworks focus on how to make more things happen with less code and magic. They invent foreign concepts and lots of things don't make sense. Nest UI, on the other hand, follows these simple principles:

    %ul
      %li Keep an easy to understand structure / mental model that's assumed intuitively, without remembering it.
      %li Use familiar concepts.
      %li Complete separation of code and HTML: no front-end rendering, no templating languages etc.
      %li Should be usable for one page webapps as well as regular websites.

    %h3 Key concepts:

    %ul
      %li Define components which in turn may have other components as children
      %li Children publish events to their parents
      %li Properties of Component objects may be tied to html element's attributes or innerText
      %li Child components may have roles, so that parents know how to react to certain events based on roles their children have.
      %li Each component has a set of behaviors which define how it interacts with users by changing its corresponding DOM element properties (for example: animations, display etc).

    %h3 Show me some code!
    
    %p Here's an example of a code that makes a button change its caption and become locked once it's clicked. First, the Dart code:

    %pre
      %code.block.language-dart= partial "code_partials/overview_1_1.dart"

    Now the corresponding HTML code:

    %pre
      %code.block.language-markup=html_code_partial("overview_1_2.html")

    %p
      So what happened here? <div class="inlineCode">attribute_names = ["caption"];</div> created
      a property on the ButtonComponent object, which we later tied to the html element's innerText,
      by adding a special html attribute <div class="inlineCode">data-component-property="caption"</div>. 
      This told NestUI to always automatically update html element's innerText when
      the corresponding property of the ButtonComponent object changes.

    %p
      Then, by saying <div class="inlineCode">native_events = ["click"];</div> we tell
      ButtonComponent that it has to listen to the corresponding html's element events,
      in this case the click event. This is because in NestUI components may have their own custom
      events generated in the code, so it's useful to separate native browser events and non-native
      ones. You will later learn that for non-native ones, you don't need to list them in
      a special property like native_events and you can go on and define handlers straight away.

    %p
      Talking about handlers: now that we can catch a native click event, we need a handler
      for it, so the button knows what to do when you click it. For that purpose,, we'll use
      a special object <span class="inlineCode">event_handlers</span>  inside the
      ButtonComponent constructor. On it we'll call the
      <span class="inlineCode">.add</span> method and assign the click handler. Notice how we say
      <span class="inlineCode">role: #self</span> - that way the ButtonComponent knows
      that we're defining an event handler for the component itself and not one of its children
      (which is totally possible, btw!).
