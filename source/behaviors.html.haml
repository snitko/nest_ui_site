---
title: "Behaviors - NestUI"
---

.mainSection

  .pure-g
    .pure-u-1.pure-u-lg-4-24
      .pure-container-left
        = partial "menu", locals: { current_page: "Behaviors" }

    .pure-u-1.pure-u-lg-20-24
      .pure-container-right

        %p
          Behaviors are special methods that usually manipulate the associated dom elements
          of components. For example, we might want to hide or disable a button - those are behaviors.
          To invoke a behavior one must call a <span class="inlineCode">behave()</span> method on a component
          and pass it a behavior name:

        %pre
          %code.language-dart button1.behave("disable");
        
        %p
          It is quite common to invoke behaviors from within components in response
          to a certain event that occurred, for example we could disable a button if
          someone clicks it:

        %pre
          %code.language-dart= partial "code_partials/behaviors_1_1.dart"

        %p
          There are some behaviors which NestUI defines for all components, others are only available
          for some (see files in <a href="https://github.com/snitko/nest_ui/tree/master/lib/behaviors">behaviors dir</a>).
          For example, all components have <span class="inlineCode">hide</span>, <span class="inlineCode">show</span>,
          <span class="inlineCode">disable</span>, <span class="inlineCode">enable</span>, <span class="inlineCode">lock</span>,
          and <span class="inlineCode">unlock</span> behaviors.


        %p.note
          <b>Note:</b> the <span class="inlineCode">show()</span> behavior implementation
          simply sets the <span class="inlineCode">display</span> property of the dom_element
          to <span class="inlineCode">block</span>. If block is not what you wish,
          you can either override the method in your own behavior class or add the
          <span class="inlineCode">data-component-display-value</span> attribute
          to your dom_element and set its value to whatever your prefer, for example 
          <span class="inlineCode">inline-block</span>. Then the <span class="inlineCode">show()</span>
          behavior will use it instead of <span class="inlineCode">block</span>.

        %p
          And you can certainly create your own custom behaviors. To do that, you first need to define a class that extends
          <span class="inlineCode">BaseComponentBehaviors</span> and has the following constructor:

        %pre
          %code.language-dart= partial "code_partials/behaviors_1_2.dart"

        %p Finally, add your behavior class to the list of behaviors in your component:

        %pre
          %code.language-dart= partial "code_partials/behaviors_1_3.dart"

        %p
          As you have probably guessed, you can define and add as many behavior classes as you want,
          combining different behaviors for various components, effectively making Behavior classes modules.
          Now we can invoke our newly created behavior with:

        %pre
          %code.language-dart button1.behave("rockAndRoll");
