---
title: "Components - NestUI"
---

.mainSection

  = partial "menu", locals: { current_page: "Components", submenu: ["components", nil] }
  .content

    %p
      While components are hardly a new idea in web development, we'll need to look at what NestUI means
      by it and how it handles components.

    .note
      %p
        NestUI includes a number of standard components most common for webpages, which you might want to use. Some of them are inclded by default,
        others you'd have to import manually. There's also a <span class="inlineCode">Component</span> class from which all NestUI components inherit
        and which you'll need to understand in order to create your own non-trivial Components.
        For documentation on individual components included into NestUI refer the submenu on the left.
        <b>It is strongly recommended that you read other major parts of this manual first
        to understand what's going on with components.</b>

    %p
      In NestUI a component is an object of class <span class="inlineCode">Component</span> (or one of its descendants). It has
      a corresponding <a href="https://api.dartlang.org/1.14.2/dart-html/HtmlElement-class.html">HtmlElement</a>,
      which can be accessed through the <span class="inlineCode">.dom_element</span> property. Except for the root
      component, whose element is assigned to be <span class="inlineCode">&lt;body&gt;</span> automatically when we create a new NestUIApp, html elements for components
      are assigned by identifying those html elements using the <span class="inlineCode">data-component-class</span>
      attributes. So if our component class is called <span class="inlineCode">ButtonComponent</span> then
      its corresponding html element should have a <span class="inlineCode">data-component-class="ButtonComponent"</span>
      attribute.

    %p
      For example, the following Dart code and its corresponding html page will produce three instances of <span class="inlineCode">ButtonComponent</span>
      class:

    %pre
      %code.block.language-dart= partial "code_partials/components_1_1.dart"

    %pre
      %code.block.language-markup= html_code_partial "components_1_2.html"

    %p
      This code isn't very helpful though, as it does nothing. Components need to be able to do something, for example
      react to user input: buttons should do something when user clicks on them. To explain what a component really is it's
      best to just list things that it has or does, because that's what truly defines it:

    %ul
      %li
        <b><a href="/properties.html">Properties or attributes.</a></b> Those are just what they appear to be: properties of Dart objects. However, they can be tied
        to the corresponding dom_element's own properties.
      %li
        <b><a href="/children-and-parents.html">Children and parents</a></b> - each component might have those. They are usually assigned automatically and are implied
        by the structure of the html document the app is tied to.
      %li
        <b><a href="/events.html">Events</a></b> - those are either caused by user who clicks the button or are generated by components themselves, such as when
        a form generates a "submit" event in response to its button "click" event.
      %li
        <b><a href="/roles.html">Roles</a></b> - are an important part of how events are handled by parent components. Based on the child component role, the parent knows
        how to handle a certain event that was generated by the child.
      %li
        <b><a href="/behaviors.html">Behaviors</a></b> - those define how a corresponding dom_element of a given component changes (for example: disappears or becomes disabled).
        Behaviors are usually invoked as a response to some event occurring: for example when user clicks a button, this button invokes
        the "disable" behavior, which makes it appear disabled and makes it impossible for the user to click it again by accident.

    %p Each one of those are discussed in the following sections of this manual.

    %h3 There is no HTML!
    %p
      One important aspect to note is that you have to create your own HTML for the components. NestUI components don't generate any HTML - instead
      NestUI scans the DOM, finds html elements with <span class="inlineCode">data-component-class</span> attributes and creates instances of components
      based on the value of that attribute.

    %p
      There is one case when NestUI Component may create a new DOM element - from <a href="">a template</a>. But even then the template
      itself is already present in the DOM and is simply cloned. There is no HTML embedded into the Dart code and there is no manual creation
      of html elements with Dart classes such as <span class="inlineCode">DivElement</span>.

    %p
      For standard components that come with library this manual will provide an example html code. It is to be used as a reference point.
      A particular Component class may expect certain html elements to be present within the associated dom_element, so that's why those examples
      come in handy. However, you can most likely rearrange html elements at your own will - the important part is having elements with attributes
      such as <span class="inlineCode">data-component-part</span> or <span class="inlineCode">data-component-property</span> with particular values present -
      those will be specified explicitly. Other than that, you're free to style and rearrange as you wish.
