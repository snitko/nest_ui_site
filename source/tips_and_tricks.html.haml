---
title: "Examples - NestUI"
---

.mainSection


  = partial "menu", locals: { current_page: "Tips & Tricks" }
  .content

    %p
      This is a collection of various things that I wasn't able to put into
      any other category.

    %h2 Separating your app into files
    %p
      If your app isn't just a small add/remove comment app provided in the
      #{link_to "examples", "examples"}, you might start to think to separate it
      into a number of files. For example, I'd put all of my component classes
      in separate files under <span class="inlineCode">./components</span>.

    %p
      Because of how Dart works, you'll need to do four things to accomplish this:

    %ol.inner
      %li Put a <span class="inlineCode">library my_app;</span> at the top of your main file
      %li Include your files with <span class="inlineCode">part 'components/comment_component.dart'</span>
      %li On top of each of the included files you should add <span class="inlineCode">part of my_app;</span>
      %li Let the NestUIApp know what is the library name you came up with for your app.

    %p Take a look at the following code:

    %pre
      %code.language-dart= partial "code_partials/tips_and_tricks_1_1.dart"


    %h2 afterInitialize hook
    %a(name="after_initialize_hook")

    %p
      Unfortunately, most of the useful code you might want to run on component initialization
      cannot be put into the constructor, because at this point the dom_element is not assigned,
      parent is not assigned and children are not initialized. Therefore, the <span class="inlineCode">afterInitialize</span>
      method is introduced - just override it in your class and it will be run after a component is
      initialized. However, it will only run if the component is initialized by another component
      through <span class="inlineCode">initChildComponents()</span> (most cases, probably). If you
      initialize a component manually, then you'll also have to run this method manually.

    %p
      Here's a typical example where <span class="inlineCode">afterInitialize</span> becomes useful -
      we create a component and then we automatically read its property values from the corresponding
      DOM elements and attributes:

    %pre
      %code.language-dart= partial "code_partials/tips_and_tricks_1_2.dart"

    For more info on <span class="inlineCode">updatePropertiesFromNodes()</span> method see
    the <a href="/properties.html#updating_from_DOM">Properties: updating from DOM</a> section.

    %h2 afterParentInitialized event handler
    %p
      It is sometimes important to wait until all children are loaded and then run some code.
      Even though <span class="inlineCode">afterInitialize()</span> is
      called only when Component is done initializing all of its children, it may happen so that you need to run some
      code in one of the Component's children, but only once the parent is done initializing other children. This can be easily done with
      the <span class="inlineCode">afterParentInitialized()</span> method (note the <b>ed</b> at the the end of the method name).
      Unlike its <span class="inlineCode">afterInitalize()</span> cousin, this method is not supposed to be overridden, but rather
      called from the constructor or even from <span class="inlineCode">afterInitialize()</span> itself. Here's how you use it:

    %pre
      %code.language-dart= partial "code_partials/tips_and_tricks_1_3.dart"

    %p
      The first thing to notice is the first argument to the <span class="inlineCode">afterParentInitialized()</span>,
      which in this case is String <i>button1</i>. What this argument actually does, it is being
      added as a <i>role</i> to the current component, so that it's uniquely identified by its
      parent. You can generate the value for this component dynamically, so that it will only
      affect a particular instance of the Component, and not all components (for an example and a use case,
      see code for <span class="inlineCode">HintComponent</span>).

    %p
      The second argument is simply a function that you're usually passing when creating event handlers,
      with all familiar arguments.

    %p
      <span class="inlineCode">afterParentInitialized()</span> is basically a convenient way for siblings to wait
      until each one of them is initialized.

    %h2 Component DOM methods
    %p
      Component offers a number of convenient methods to find various elements in its DOM-structure:

    %ul
      %li
        <span class="inlineCode">allDomDescendants()</span> gets a list of all DOM-descendants of the <span class="inlineCode">#dom_element</span> that are not included
        into other child Component DOM-structures. The returned List lacks proper hierarchy.
      %li
        <span class="inlineCode">allDomDescendantsAndSelfWithAttr()</span> and <span class="inlineCode">firstDomDescendantOrSelfWithAttr()</span> find descendants
        that have have certain attributes/values.
      %li
        <span class="inlineCode">findAllParts()</span> and <span class="inlineCode">findPart()</span> will find HtmlElement(s) that correspond to certain <i>parts</i>.
      %li
        <span class="inlineCode">findPropertyElements()</span> and <span class="inlineCode">findFirstPropertyElement()</span>
        will find HtmlElement(s) that correspond to certain <i>properties</i>.

    %p For a more thorough information on those methods and arguments they accept, consult <a href="http://nestui-docs.romansnitko.com/nest_ui/ComponentDom-class.html">the documentation for ComponentDom</a> module.
