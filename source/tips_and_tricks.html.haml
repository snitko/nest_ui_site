---
title: "Examples - NestUI"
---

.mainSection


  = partial "menu", locals: { current_page: "Tips & Tricks" }
  .content

    %p
      This is a collection of various things that I wasn't able to put into
      any other category.

    %h2 Separating your app into files
    %p
      If your app isn't just a small add/remove comment app provided in the
      #{link_to "examples", "examples"}, you might start to think to separate it
      into a number of files. For example, I'd put all of my component classes
      in separate files under <span class="inlineCode">./components</span>.

    %p
      Because of how Dart works, you'll need to do four things to accomplish this:

    %ol.inner
      %li Put a <span class="inlineCode">library my_app;</span> at the top of your main file
      %li Include your files with <span class="inlineCode">part 'components/comment_component.dart'</span>
      %li On top of each of the included files you should add <span class="inlineCode">part of my_app;</span>
      %li Let the NestUIApp know what is the library name you came up with for your app.

    %p Take a look at the following code:

    %pre
      %code.language-dart= partial "code_partials/tips_and_tricks_1_1.dart"


    %h2 afterInitialize hook
    %a(name="after_initialize_hook")

    %p
      Unfortunately, most of the useful code you might want to run on component initialization
      cannot be put into the constructor, because at this point the dom_element is not assigned,
      parent is not assigned and children are not initialized. Therefore, the <span class="inlineCode">afterInitialize</span>
      method is introduced - just override it in your class and it will be run after a component is
      initialized. However, it will only run if the component is initialized by another component
      through <span class="inlineCode">initChildComponents()</span> (most cases, probably). If you
      initialize a component manually, then you'll also have to run this method manually.

    %p
      Here's a typical example where <span class="inlineCode">afterInitialize</span> becomes useful -
      we create a component and then we automatically read its property values from the corresponding
      DOM elements and attributes:

    %pre
      %code.language-dart= partial "code_partials/tips_and_tricks_1_2.dart"

    For more info on <span class="inlineCode">updatePropertiesFromNodes()</span> method see
    the <a href="/properties.html#updating_from_DOM">Properties: updating from DOM</a> section.
