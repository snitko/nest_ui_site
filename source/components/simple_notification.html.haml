---
title: "SimpleNotificationComponent - Components - NestUI"
---

.mainSection

  = partial "menu", locals: { current_page: "Components", submenu: ["components", nil] }
  .content

    %h2 SimpleNotification
    .note Read <a href="#{$nest_ui_docs}/nest_ui/SimpleNotificationComponent-class.html">the documentation for this class.</a>

    .note
      You need to manually import this component into your NestUI app as it's not imported by default.
      To do that, add the following two lines (in the exact order) into the file where you initialize your NestUI app:
      %pre
        %code.language-dart= "part 'packages/nest_ui/behaviors/simple_notification_behaviors.dart';\npart 'packages/nest_ui/components/simple_notification_component.dart';"

    %p
      The purpose of this component is to display user notifications, such as when a user successfully logs in or incorrectly fills the form.
      Such notifications usually appear on top of the page and disappear after some time. This component if flexible enough to
      allow you to tweak for how long a notification should be displayed, whether it should stay there until user leaves the page (permanent),
      and also tweak the message type (so that you can add CSS code to have different notification colors for different types of messages).

    %p
      The best part of this component is that you can invoke the notification in two different ways: programmatically, by writing
      Dart code and initializing the component or by having a DOM element in your DOM. The latter is convenient to automatically
      display messages on page load and is, probably, the most common way in which this component is going to be used.


    %p
      Thus, let's look at the example HTML code for the component:
    %pre
      %code.block.language-markup= html_code_partial "components/simple_notification_1_1.html"

    %p
      If this code is on the HTML page being loaded, the <span class="inlineCode">SimpleNotificationComponent</span>
      will appear automatically. However, your task is to have a container prepared for all notifications.

    %h4 Notifications Container and container_selector property
    %p
      All notifications will appear in a special DOM element called <i>notifications container</i>. Normally,
      you'd want to style it in such a way, so that its position is <i>fixed</i> and it
      appears somewhere on top. Here's an example CSS for such a container:

    %pre
      %code.language-dart= partial "code_partials/components/simple_notification_1_2.css"

    %p
      The selector <span class="inlineCode">#simple_notifications_container</span> is a standard one
      used by the <span class="inlineCode">SimpleNotificationsComponent</span>, but you can change it
      per notification by changing the <span class="inlineCode">#container_selector</span> either programmatically
      in Dart code or in HTML. Here's an example of an HTML code for a notification that makes it appear in another
      container:

    %pre
      %code.block.language-markup= html_code_partial "components/simple_notification_1_3.html"

    %p
      Notice that we used a <i>class</i> selector instead of an <i>id</i> selector. Generally, anything that
      works for <span class="inlineCode">document.querySelector</span> works here as well.


    %h4 close.click event 
    %p
      If you want to let users close notifications manually, simply have a <i>part</i> inside the component's HTML
      with the name <span class="inlineCode">close</span>:

    %pre
      %code.block.language-markup= html_code_partial "components/simple_notification_1_4.html"

    %h4 permanent
    %p
      If you want to completely disallow closing the notification, you'll need to set the <span class="inlineCode">permanent</span>
      property to <span class="inlineCode">true</span>. Then it becomes impossible to close the notification
      and even the <span class="inlineCode">close</span> part HTML element gets hidden.

    %h4 autohide_delay
    %p
      A common practice is to have notification disappear over time. The <span class="inlineCode">autohide_delay</span>
      property works just the way it works in <a href="/components/hint_component.html">HintComponent</a> and automatically hides the
      notification after a specified number of seconds. The default value for this property is <span class="inlineCode">10</span> so all
      notifications will disappear unless you explicitly set it to <span class="inlineCode">null</span> or set
      <span class="inlineCode">permanent</span> to <span class="inlineCode">true</span>.


    %h4 message_type
    %p
      This property doesn't affect anything important, but if set, it automatically adds a class to the <span class="inlineCode">.dom_element</span>:
      <span class="inlineCode">class="message-type-${message_type}"</span>. Then in your CSS code you can specify various styles
      for different types of messages.

    %h4 ignore_duplicates
    %p
      Most of the time it's a good idea not to show identical notifications twice. For that reason, the default behavior of
      <span class="inlineCode">SimpleNotificationComponent</span> is to check whether there's another instance of the same class
      which is currently visible inside the same notifications container. If there is, the second notification will never be displayed
      until the previous one is discarded (to make it clear: no, it DOESN'T wait until the previous notification disappears; it checks
      whether it's there and makes a decision once and for all).

    %p
      You can change this behavior by setting <span class="inlineCode">.ingore_duplicates</span> property to <span class="inlineCode">false</span>.
