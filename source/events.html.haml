---
title: "Events - NestUI"
---

.mainSection

  .pure-g
    .pure-u-1.pure-u-lg-4-24
      .pure-container-left
        = partial "menu", locals: { current_page: "Events" }

    .pure-u-1.pure-u-lg-20-24
      .pure-container-right

        %p
          Events in NestUI are what they sound like, but actually a little more - when a user clicks
          a form's submit button, a "click" event is created, which is caught by the button's event handler
          we can create. Let's look at the code:

        %pre
          %code.language-dart= partial "code_partials/events_1_1.dart"

        %p
          Not terribly useful though. You click a button, it disappears. What we need is for the form to send
          a request (essentially, submit itself). For that, assuming that a particular <span class="inlineCode">ButtonComponent</span> is one of the form's
          children, we can write the following code:

        %pre
          %code.language-dart= partial "code_partials/events_1_2.dart"

        %p Now we need to make sure our html for the button has the right role set, the "submit" role:

        %pre
          %code.block.language-markup= html_code_partial "events_1_3.html"

        %p
          As you can see from the example, parents are naturally aware of their children events. Thus,
          one could say, events propagate one level up, but no further.


        %h3 Native vs. generated events

        %p
          In NestUI, you actually have two types of events - native and generated. This is for convenience
          in both coding and understanding. Native events are the ones that the browser generates, while
          all other events can be generated using NestUI methods. We've already seen an example of a native
          event above, now let's make our form generate a non-native "submit" event, so that root component
          becomes aware a form was submitted and, maybe, does something about it, like changes page title.

        %pre
          %code.language-dart= partial "code_partials/events_1_4.dart"

        %p
          You can see here that we basically just extended the handler function for the event
          and added another line, which published a "submit" event. Now form's parent, if he wishes so,
          can catch that event and do something useful with it, although, of course, it doesn't have to.

        %h3 Native events default handlers
        %p
          When you click a submit button on a form, a browser usually decides to actually submit the
          form this button belongs to - this is an example of a native event handler.
          NestUI automatically prevents that handler from running, so in that case the form won't
          be submitted. However, that's not always desirable and there's actually a very simple way
          to NOT prevent default event handlers from being invoked: simply prepend an event name in
          the <span class="inlineCode">native_events</span> list with <span class="inlineCode">!</span>,
          like this:

        %pre
          %code.language-dart= partial "code_partials/events_1_9.dart"

        %p
          In this example, the button will still disappear as its style is set to
          <span class="inlineCode">display: none;</span> but the form the button belongs to
          (if, indeed, it does belong to any form) will also be submitted.

        %h3 Events on component parts

        %p
          Sometimes, your components may be rather complex in terms of DOM elements that construct their visual
          representation, but it's not always reasonable to break them down into sub-components. By introducing
          component "parts", we can still catch native events from those parts without creating additional
          Component classes.
          
        %p
          Let's suppose all forms on our website need to have two buttons "Submit" and "Cancel" - say, we're absolutely
          certain about that requirement. Perhaps we then need a single component called <span class="inlineCode">FormButtonComponent</span>, which
          will consist of two parts - the two button elements, each with a distinct name. First, let's look at the
          html code:

        %pre
          %code.block.language-markup= html_code_partial "events_1_5.html"

        %p Now we'll need our dart code that handles events from parts of the <span class="inlineCode">FormButtonComponent</span>:

        %pre
          %code.language-dart= partial "code_partials/events_1_6.dart"

        %p
          And now a click on either part (html button) will invoke a different handler.
          Taking it a step further, we can then make <span class="inlineCode">FormButtonComponent</span> publish its own
          non-native events and let the form decide what to do with them:

        %pre
          %code.language-dart= partial "code_partials/events_1_7.dart"

        %p
          In this case, "submit" and "cancel" are events generated by the <span class="inlineCode">FormButtonComponent</span>
          and the <span class="inlineCode">FormComponent</span> may just as easily define handlers for those:

        %pre
          %code.language-dart= partial "code_partials/events_1_8.dart"
